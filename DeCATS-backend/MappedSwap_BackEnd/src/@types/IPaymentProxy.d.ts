/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewRound = ContractEventLog<{
  roundID: string;
  token: string;
  funder: string;
  spender: string;
  recipient: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type RoundCancel = ContractEventLog<{
  roundID: string;
  0: string;
}>;
export type Transfer = ContractEventLog<{
  roundID: string;
  amount: string;
  0: string;
  1: string;
}>;

export interface IPaymentProxy extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IPaymentProxy;
  clone(): IPaymentProxy;
  methods: {
    getRound(
      roundID: number | string | BN
    ): NonPayableTransactionObject<[string, string, string, string, string]>;

    roundCount(): NonPayableTransactionObject<string>;

    depositToNewRound(
      token: string,
      spender: string,
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    withdrawFromRound(
      roundID: number | string | BN
    ): NonPayableTransactionObject<void>;

    transfer(
      roundID: number | string | BN,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    transferMultiple(
      roundID: number | string | BN,
      amounts: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    transferWithData(
      roundID: number | string | BN,
      amount: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    transferMultipleWithData(
      roundID: number | string | BN,
      amounts: (number | string | BN)[],
      data: (string | number[])[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    NewRound(cb?: Callback<NewRound>): EventEmitter;
    NewRound(options?: EventOptions, cb?: Callback<NewRound>): EventEmitter;

    RoundCancel(cb?: Callback<RoundCancel>): EventEmitter;
    RoundCancel(
      options?: EventOptions,
      cb?: Callback<RoundCancel>
    ): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NewRound", cb: Callback<NewRound>): void;
  once(event: "NewRound", options: EventOptions, cb: Callback<NewRound>): void;

  once(event: "RoundCancel", cb: Callback<RoundCancel>): void;
  once(
    event: "RoundCancel",
    options: EventOptions,
    cb: Callback<RoundCancel>
  ): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;
}
