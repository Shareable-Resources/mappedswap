/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ClaimStakeRewards = ContractEventLog<{
  userAddr: string;
  amount: string;
  0: string;
  1: string;
}>;
export type FixedPoolStaking = ContractEventLog<{
  userAddr: string;
  tokenAmount: string;
  equivUSD: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type RedeemToken = ContractEventLog<{
  userAddr: string;
  amount: string;
  0: string;
  1: string;
}>;
export type RequestRedemption = ContractEventLog<{
  userAddr: string;
  amount: string;
  0: string;
  1: string;
}>;
export type StakeToken = ContractEventLog<{
  userAddr: string;
  amount: string;
  0: string;
  1: string;
}>;

export interface MiningPool extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MiningPool;
  clone(): MiningPool;
  methods: {
    initialize(
      _tokenToStake: string,
      _tokenToReward: string,
      _referenceUniswapV3Pool: string,
      _totalAnnualRewards: number | string | BN,
      _fixedPoolCapacityUSD: number | string | BN,
      _lockPeriod: number | string | BN,
      _rewardPeriod: number | string | BN,
      _redeemWaitPeriod: number | string | BN
    ): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    tokenReceived(
      from: string,
      amount: number | string | BN,
      arg2: string | number[]
    ): NonPayableTransactionObject<void>;

    onTokenTransfer(
      from: string,
      amount: number | string | BN,
      arg2: string | number[]
    ): NonPayableTransactionObject<boolean>;

    onTransferReceived(
      arg0: string,
      from: string,
      value: number | string | BN,
      arg3: string | number[]
    ): NonPayableTransactionObject<string>;

    getTokenToStake(): NonPayableTransactionObject<string>;

    getTokenToReward(): NonPayableTransactionObject<string>;

    getReferenceUniswapV3Pool(): NonPayableTransactionObject<string>;

    getTotalAnnualRewards(): NonPayableTransactionObject<string>;

    getFixedPoolCapacityUSD(): NonPayableTransactionObject<string>;

    getFixedPoolUsageUSD(): NonPayableTransactionObject<string>;

    getLockPeriod(): NonPayableTransactionObject<string>;

    getRewardPeriod(): NonPayableTransactionObject<string>;

    getRedeemWaitPeriod(): NonPayableTransactionObject<string>;

    getPoolStake(): NonPayableTransactionObject<string>;

    getUserStake(userAddr: string): NonPayableTransactionObject<string>;

    getUserStakeLocked(userAddr: string): NonPayableTransactionObject<string>;

    getUserStakeUnlocked(userAddr: string): NonPayableTransactionObject<string>;

    getUserStakeDetails(
      userAddr: string
    ): NonPayableTransactionObject<[string, string][]>;

    getUserStakeRewards(userAddr: string): NonPayableTransactionObject<string>;

    getUserStakeRewardsLocked(
      userAddr: string
    ): NonPayableTransactionObject<string>;

    getUserStakeRewardsUnlocked(
      userAddr: string
    ): NonPayableTransactionObject<string>;

    getUserStakeRewardsDetails(
      userAddr: string
    ): NonPayableTransactionObject<[string, string][]>;

    getUserRewardsDetails(
      userAddr: string,
      exclusiveStart: number | string | BN,
      inlcusiveEnd: number | string | BN
    ): NonPayableTransactionObject<[string, string][]>;

    getUserRequestedToRedeem(
      userAddr: string
    ): NonPayableTransactionObject<string>;

    getUserCanRedeemNow(userAddr: string): NonPayableTransactionObject<string>;

    getUserRedemptionDetails(
      userAddr: string
    ): NonPayableTransactionObject<[string, string][]>;

    stakeToken(amount: number | string | BN): NonPayableTransactionObject<void>;

    claimStakeRewards(): NonPayableTransactionObject<void>;

    requestRedemption(
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    redeemToken(): NonPayableTransactionObject<void>;

    getAllUsers(): NonPayableTransactionObject<string[]>;

    setPriceConsultSeconds(
      _priceConsultSeconds: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    ClaimStakeRewards(cb?: Callback<ClaimStakeRewards>): EventEmitter;
    ClaimStakeRewards(
      options?: EventOptions,
      cb?: Callback<ClaimStakeRewards>
    ): EventEmitter;

    FixedPoolStaking(cb?: Callback<FixedPoolStaking>): EventEmitter;
    FixedPoolStaking(
      options?: EventOptions,
      cb?: Callback<FixedPoolStaking>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    RedeemToken(cb?: Callback<RedeemToken>): EventEmitter;
    RedeemToken(
      options?: EventOptions,
      cb?: Callback<RedeemToken>
    ): EventEmitter;

    RequestRedemption(cb?: Callback<RequestRedemption>): EventEmitter;
    RequestRedemption(
      options?: EventOptions,
      cb?: Callback<RequestRedemption>
    ): EventEmitter;

    StakeToken(cb?: Callback<StakeToken>): EventEmitter;
    StakeToken(options?: EventOptions, cb?: Callback<StakeToken>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ClaimStakeRewards", cb: Callback<ClaimStakeRewards>): void;
  once(
    event: "ClaimStakeRewards",
    options: EventOptions,
    cb: Callback<ClaimStakeRewards>
  ): void;

  once(event: "FixedPoolStaking", cb: Callback<FixedPoolStaking>): void;
  once(
    event: "FixedPoolStaking",
    options: EventOptions,
    cb: Callback<FixedPoolStaking>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "RedeemToken", cb: Callback<RedeemToken>): void;
  once(
    event: "RedeemToken",
    options: EventOptions,
    cb: Callback<RedeemToken>
  ): void;

  once(event: "RequestRedemption", cb: Callback<RequestRedemption>): void;
  once(
    event: "RequestRedemption",
    options: EventOptions,
    cb: Callback<RequestRedemption>
  ): void;

  once(event: "StakeToken", cb: Callback<StakeToken>): void;
  once(
    event: "StakeToken",
    options: EventOptions,
    cb: Callback<StakeToken>
  ): void;
}
