/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type UpdateFunding = ContractEventLog<{
  customer: string;
  oldFunding: string;
  newFunding: string;
  0: string;
  1: string;
  2: string;
}>;
export type UpdateLeverage = ContractEventLog<{
  customer: string;
  oldLeverage: string;
  newLeverage: string;
  0: string;
  1: string;
  2: string;
}>;
export type UpdateMode = ContractEventLog<{
  customer: string;
  oldMode: string;
  newMode: string;
  0: string;
  1: string;
  2: string;
}>;
export type UpdateRiskLevel = ContractEventLog<{
  customer: string;
  oldRiskLevel: string;
  newRiskLevel: string;
  0: string;
  1: string;
  2: string;
}>;
export type UpdateStatus = ContractEventLog<{
  customer: string;
  oldStatus: string;
  newStatus: string;
  0: string;
  1: string;
  2: string;
}>;

export interface IPoolAgent extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IPoolAgent;
  clone(): IPoolAgent;
  methods: {
    getCustomerInfo(
      customer: string
    ): NonPayableTransactionObject<
      [
        [string, string, [string, string][], string, string][],
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ]
    >;

    getOwner(): NonPayableTransactionObject<string>;

    getReferenceToken(): NonPayableTransactionObject<string>;

    getRouter(): NonPayableTransactionObject<string>;

    updateCustomerDetails(
      customer: string,
      newMode: number | string | BN,
      newLeverage: number | string | BN,
      newFunding: number | string | BN,
      newRiskLevel: number | string | BN,
      newStatus: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    UpdateFunding(cb?: Callback<UpdateFunding>): EventEmitter;
    UpdateFunding(
      options?: EventOptions,
      cb?: Callback<UpdateFunding>
    ): EventEmitter;

    UpdateLeverage(cb?: Callback<UpdateLeverage>): EventEmitter;
    UpdateLeverage(
      options?: EventOptions,
      cb?: Callback<UpdateLeverage>
    ): EventEmitter;

    UpdateMode(cb?: Callback<UpdateMode>): EventEmitter;
    UpdateMode(options?: EventOptions, cb?: Callback<UpdateMode>): EventEmitter;

    UpdateRiskLevel(cb?: Callback<UpdateRiskLevel>): EventEmitter;
    UpdateRiskLevel(
      options?: EventOptions,
      cb?: Callback<UpdateRiskLevel>
    ): EventEmitter;

    UpdateStatus(cb?: Callback<UpdateStatus>): EventEmitter;
    UpdateStatus(
      options?: EventOptions,
      cb?: Callback<UpdateStatus>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "UpdateFunding", cb: Callback<UpdateFunding>): void;
  once(
    event: "UpdateFunding",
    options: EventOptions,
    cb: Callback<UpdateFunding>
  ): void;

  once(event: "UpdateLeverage", cb: Callback<UpdateLeverage>): void;
  once(
    event: "UpdateLeverage",
    options: EventOptions,
    cb: Callback<UpdateLeverage>
  ): void;

  once(event: "UpdateMode", cb: Callback<UpdateMode>): void;
  once(
    event: "UpdateMode",
    options: EventOptions,
    cb: Callback<UpdateMode>
  ): void;

  once(event: "UpdateRiskLevel", cb: Callback<UpdateRiskLevel>): void;
  once(
    event: "UpdateRiskLevel",
    options: EventOptions,
    cb: Callback<UpdateRiskLevel>
  ): void;

  once(event: "UpdateStatus", cb: Callback<UpdateStatus>): void;
  once(
    event: "UpdateStatus",
    options: EventOptions,
    cb: Callback<UpdateStatus>
  ): void;
}
