/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Buy = ContractEventLog<{
  customer: string;
  pairName: string;
  tokenNameBuy: string;
  amountBuy: string;
  newBalanceBuy: string;
  amountSell: string;
  newBalanceSell: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
}>;
export type IncreaseBalance = ContractEventLog<{
  customer: string;
  tokenName: string;
  amount: string;
  newBalance: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Interest = ContractEventLog<{
  customer: string;
  beginTime: string;
  endTime: string;
  tokenNames: string[];
  realizedBalances: string[];
  interests: string[];
  0: string;
  1: string;
  2: string;
  3: string[];
  4: string[];
  5: string[];
}>;
export type Sell = ContractEventLog<{
  customer: string;
  pairName: string;
  tokenNameSell: string;
  amountSell: string;
  newBalanceSell: string;
  amountBuy: string;
  newBalanceBuy: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
}>;
export type Withdraw = ContractEventLog<{
  customer: string;
  tokenName: string;
  amount: string;
  newBalance: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface IPoolCustomer extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IPoolCustomer;
  clone(): IPoolCustomer;
  methods: {
    buy(
      customer: string,
      pairName: string,
      tokenNameBuy: string,
      amountBuy: number | string | BN,
      amountSellMax: number | string | BN,
      deadline: number | string | BN
    ): NonPayableTransactionObject<void>;

    getAllPairs(): NonPayableTransactionObject<string[]>;

    getAllTokens(): NonPayableTransactionObject<string[]>;

    getCustomerInfo(
      customer: string
    ): NonPayableTransactionObject<
      [
        [string, string, [string, string][], string, string][],
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ]
    >;

    getOwner(): NonPayableTransactionObject<string>;

    getPairInfo(
      pairName: string
    ): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        boolean
      ]
    >;

    getReferenceToken(): NonPayableTransactionObject<string>;

    getRouter(): NonPayableTransactionObject<string>;

    getTokenInfo(
      tokenName: string
    ): NonPayableTransactionObject<[string, [string, string][], string]>;

    getTokenInterestHistory(
      tokenName: string,
      limit: number | string | BN
    ): NonPayableTransactionObject<[string, string][]>;

    sell(
      customer: string,
      pairName: string,
      tokenNameSell: string,
      amountSell: number | string | BN,
      amountBuyMin: number | string | BN,
      deadline: number | string | BN
    ): NonPayableTransactionObject<void>;

    withdraw(
      tokenName: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    withdrawTo(
      toCustomer: string,
      tokenName: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Buy(cb?: Callback<Buy>): EventEmitter;
    Buy(options?: EventOptions, cb?: Callback<Buy>): EventEmitter;

    IncreaseBalance(cb?: Callback<IncreaseBalance>): EventEmitter;
    IncreaseBalance(
      options?: EventOptions,
      cb?: Callback<IncreaseBalance>
    ): EventEmitter;

    Interest(cb?: Callback<Interest>): EventEmitter;
    Interest(options?: EventOptions, cb?: Callback<Interest>): EventEmitter;

    Sell(cb?: Callback<Sell>): EventEmitter;
    Sell(options?: EventOptions, cb?: Callback<Sell>): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Buy", cb: Callback<Buy>): void;
  once(event: "Buy", options: EventOptions, cb: Callback<Buy>): void;

  once(event: "IncreaseBalance", cb: Callback<IncreaseBalance>): void;
  once(
    event: "IncreaseBalance",
    options: EventOptions,
    cb: Callback<IncreaseBalance>
  ): void;

  once(event: "Interest", cb: Callback<Interest>): void;
  once(event: "Interest", options: EventOptions, cb: Callback<Interest>): void;

  once(event: "Sell", cb: Callback<Sell>): void;
  once(event: "Sell", options: EventOptions, cb: Callback<Sell>): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
