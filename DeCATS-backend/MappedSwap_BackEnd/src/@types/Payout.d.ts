/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approved = ContractEventLog<{
  roundID: string;
  approver: string;
  0: string;
  1: string;
}>;
export type Claimed = ContractEventLog<{
  roundID: string;
  recipient: string;
  tokenList: string[];
  amountList: string[];
  0: string;
  1: string;
  2: string[];
  3: string[];
}>;
export type Created = ContractEventLog<{
  roundID: string;
  creator: string;
  0: string;
  1: string;
}>;
export type Revoked = ContractEventLog<{
  roundID: string;
  approver: string;
  0: string;
  1: string;
}>;
export type UpdateFinished = ContractEventLog<{
  roundID: string;
  creator: string;
  verifier: string;
  0: string;
  1: string;
  2: string;
}>;
export type Verified = ContractEventLog<{
  roundID: string;
  verifier: string;
  0: string;
  1: string;
}>;

export interface Payout extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Payout;
  clone(): Payout;
  methods: {
    initialize(): NonPayableTransactionObject<void>;

    getOwner(): NonPayableTransactionObject<string>;

    getNextRoundID(): NonPayableTransactionObject<string>;

    getRoundSummary(
      roundID: number | string | BN
    ): NonPayableTransactionObject<
      [
        [string, string, string][],
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ]
    >;

    verify(
      roundID: number | string | BN,
      agentAddr: string,
      tokenList: string[],
      amountList: (number | string | BN)[]
    ): NonPayableTransactionObject<boolean>;

    create(): NonPayableTransactionObject<string>;

    update(
      roundID: number | string | BN,
      tokenList: string[],
      agentPayoutList: [string, (number | string | BN)[]][]
    ): NonPayableTransactionObject<void>;

    updateFinish(
      roundID: number | string | BN,
      verifier: string
    ): NonPayableTransactionObject<void>;

    verifyFinish(
      roundID: number | string | BN
    ): NonPayableTransactionObject<void>;

    approve(roundID: number | string | BN): NonPayableTransactionObject<void>;

    claim(
      roundID: number | string | BN,
      tokenList: string[],
      amountList: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    claimFor(
      roundID: number | string | BN,
      recipient: string,
      tokenList: string[],
      amountList: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    revoke(roundID: number | string | BN): NonPayableTransactionObject<void>;
  };
  events: {
    Approved(cb?: Callback<Approved>): EventEmitter;
    Approved(options?: EventOptions, cb?: Callback<Approved>): EventEmitter;

    Claimed(cb?: Callback<Claimed>): EventEmitter;
    Claimed(options?: EventOptions, cb?: Callback<Claimed>): EventEmitter;

    Created(cb?: Callback<Created>): EventEmitter;
    Created(options?: EventOptions, cb?: Callback<Created>): EventEmitter;

    Revoked(cb?: Callback<Revoked>): EventEmitter;
    Revoked(options?: EventOptions, cb?: Callback<Revoked>): EventEmitter;

    UpdateFinished(cb?: Callback<UpdateFinished>): EventEmitter;
    UpdateFinished(
      options?: EventOptions,
      cb?: Callback<UpdateFinished>
    ): EventEmitter;

    Verified(cb?: Callback<Verified>): EventEmitter;
    Verified(options?: EventOptions, cb?: Callback<Verified>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approved", cb: Callback<Approved>): void;
  once(event: "Approved", options: EventOptions, cb: Callback<Approved>): void;

  once(event: "Claimed", cb: Callback<Claimed>): void;
  once(event: "Claimed", options: EventOptions, cb: Callback<Claimed>): void;

  once(event: "Created", cb: Callback<Created>): void;
  once(event: "Created", options: EventOptions, cb: Callback<Created>): void;

  once(event: "Revoked", cb: Callback<Revoked>): void;
  once(event: "Revoked", options: EventOptions, cb: Callback<Revoked>): void;

  once(event: "UpdateFinished", cb: Callback<UpdateFinished>): void;
  once(
    event: "UpdateFinished",
    options: EventOptions,
    cb: Callback<UpdateFinished>
  ): void;

  once(event: "Verified", cb: Callback<Verified>): void;
  once(event: "Verified", options: EventOptions, cb: Callback<Verified>): void;
}
