/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface OracleTest extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): OracleTest;
  clone(): OracleTest;
  methods: {
    advanceTime(by: number | string | BN): NonPayableTransactionObject<void>;

    batchUpdate(
      params: [
        number | string | BN,
        number | string | BN,
        number | string | BN
      ][]
    ): NonPayableTransactionObject<void>;

    cardinality(): NonPayableTransactionObject<string>;

    cardinalityNext(): NonPayableTransactionObject<string>;

    getGasCostOfObserve(
      secondsAgos: (number | string | BN)[]
    ): NonPayableTransactionObject<string>;

    grow(
      _cardinalityNext: number | string | BN
    ): NonPayableTransactionObject<void>;

    index(): NonPayableTransactionObject<string>;

    initialize(
      params: [number | string | BN, number | string | BN, number | string | BN]
    ): NonPayableTransactionObject<void>;

    liquidity(): NonPayableTransactionObject<string>;

    observations(arg0: number | string | BN): NonPayableTransactionObject<{
      blockTimestamp: string;
      tickCumulative: string;
      secondsPerLiquidityCumulativeX128: string;
      initialized: boolean;
      0: string;
      1: string;
      2: string;
      3: boolean;
    }>;

    observe(
      secondsAgos: (number | string | BN)[]
    ): NonPayableTransactionObject<{
      tickCumulatives: string[];
      secondsPerLiquidityCumulativeX128s: string[];
      0: string[];
      1: string[];
    }>;

    tick(): NonPayableTransactionObject<string>;

    time(): NonPayableTransactionObject<string>;

    update(
      params: [number | string | BN, number | string | BN, number | string | BN]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
