/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type PoolDeployed = ContractEventLog<{
  pool: string;
  0: string;
}>;

export interface MockTimeUniswapV3PoolDeployer extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MockTimeUniswapV3PoolDeployer;
  clone(): MockTimeUniswapV3PoolDeployer;
  methods: {
    deploy(
      factory: string,
      token0: string,
      token1: string,
      fee: number | string | BN,
      tickSpacing: number | string | BN
    ): NonPayableTransactionObject<string>;

    parameters(): NonPayableTransactionObject<{
      factory: string;
      token0: string;
      token1: string;
      fee: string;
      tickSpacing: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;
  };
  events: {
    PoolDeployed(cb?: Callback<PoolDeployed>): EventEmitter;
    PoolDeployed(
      options?: EventOptions,
      cb?: Callback<PoolDeployed>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "PoolDeployed", cb: Callback<PoolDeployed>): void;
  once(
    event: "PoolDeployed",
    options: EventOptions,
    cb: Callback<PoolDeployed>
  ): void;
}
