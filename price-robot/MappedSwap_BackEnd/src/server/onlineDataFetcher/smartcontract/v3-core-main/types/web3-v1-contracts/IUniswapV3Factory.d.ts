/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type FeeAmountEnabled = ContractEventLog<{
  fee: string;
  tickSpacing: string;
  0: string;
  1: string;
}>;
export type OwnerChanged = ContractEventLog<{
  oldOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type PoolCreated = ContractEventLog<{
  token0: string;
  token1: string;
  fee: string;
  tickSpacing: string;
  pool: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;

export interface IUniswapV3Factory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IUniswapV3Factory;
  clone(): IUniswapV3Factory;
  methods: {
    createPool(
      tokenA: string,
      tokenB: string,
      fee: number | string | BN
    ): NonPayableTransactionObject<string>;

    enableFeeAmount(
      fee: number | string | BN,
      tickSpacing: number | string | BN
    ): NonPayableTransactionObject<void>;

    feeAmountTickSpacing(
      fee: number | string | BN
    ): NonPayableTransactionObject<string>;

    getPool(
      tokenA: string,
      tokenB: string,
      fee: number | string | BN
    ): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    setOwner(_owner: string): NonPayableTransactionObject<void>;
  };
  events: {
    FeeAmountEnabled(cb?: Callback<FeeAmountEnabled>): EventEmitter;
    FeeAmountEnabled(
      options?: EventOptions,
      cb?: Callback<FeeAmountEnabled>
    ): EventEmitter;

    OwnerChanged(cb?: Callback<OwnerChanged>): EventEmitter;
    OwnerChanged(
      options?: EventOptions,
      cb?: Callback<OwnerChanged>
    ): EventEmitter;

    PoolCreated(cb?: Callback<PoolCreated>): EventEmitter;
    PoolCreated(
      options?: EventOptions,
      cb?: Callback<PoolCreated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "FeeAmountEnabled", cb: Callback<FeeAmountEnabled>): void;
  once(
    event: "FeeAmountEnabled",
    options: EventOptions,
    cb: Callback<FeeAmountEnabled>
  ): void;

  once(event: "OwnerChanged", cb: Callback<OwnerChanged>): void;
  once(
    event: "OwnerChanged",
    options: EventOptions,
    cb: Callback<OwnerChanged>
  ): void;

  once(event: "PoolCreated", cb: Callback<PoolCreated>): void;
  once(
    event: "PoolCreated",
    options: EventOptions,
    cb: Callback<PoolCreated>
  ): void;
}
