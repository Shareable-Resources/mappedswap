/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface SqrtPriceMathEchidnaTest extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SqrtPriceMathEchidnaTest;
  clone(): SqrtPriceMathEchidnaTest;
  methods: {
    getAmount0DeltaEquivalency(
      sqrtP: number | string | BN,
      sqrtQ: number | string | BN,
      liquidity: number | string | BN,
      roundUp: boolean
    ): NonPayableTransactionObject<void>;

    getAmount0DeltaInvariants(
      sqrtP: number | string | BN,
      sqrtQ: number | string | BN,
      liquidity: number | string | BN
    ): NonPayableTransactionObject<void>;

    getAmount0DeltaSignedInvariants(
      sqrtP: number | string | BN,
      sqrtQ: number | string | BN,
      liquidity: number | string | BN
    ): NonPayableTransactionObject<void>;

    getAmount1DeltaInvariants(
      sqrtP: number | string | BN,
      sqrtQ: number | string | BN,
      liquidity: number | string | BN
    ): NonPayableTransactionObject<void>;

    getAmount1DeltaSignedInvariants(
      sqrtP: number | string | BN,
      sqrtQ: number | string | BN,
      liquidity: number | string | BN
    ): NonPayableTransactionObject<void>;

    getInRangeMintInvariants(
      sqrtLower: number | string | BN,
      sqrtCurrent: number | string | BN,
      sqrtUpper: number | string | BN,
      liquidity: number | string | BN
    ): NonPayableTransactionObject<void>;

    getNextSqrtPriceFromAmount0RoundingUpInvariants(
      sqrtPX96: number | string | BN,
      liquidity: number | string | BN,
      amount: number | string | BN,
      add: boolean
    ): NonPayableTransactionObject<void>;

    getNextSqrtPriceFromAmount1RoundingDownInvariants(
      sqrtPX96: number | string | BN,
      liquidity: number | string | BN,
      amount: number | string | BN,
      add: boolean
    ): NonPayableTransactionObject<void>;

    getNextSqrtPriceFromInputInvariants(
      sqrtP: number | string | BN,
      liquidity: number | string | BN,
      amountIn: number | string | BN,
      zeroForOne: boolean
    ): NonPayableTransactionObject<void>;

    getNextSqrtPriceFromOutputInvariants(
      sqrtP: number | string | BN,
      liquidity: number | string | BN,
      amountOut: number | string | BN,
      zeroForOne: boolean
    ): NonPayableTransactionObject<void>;

    getOutOfRangeMintInvariants(
      sqrtA: number | string | BN,
      sqrtB: number | string | BN,
      liquidity: number | string | BN
    ): NonPayableTransactionObject<void>;

    mulDivRoundingUpInvariants(
      x: number | string | BN,
      y: number | string | BN,
      z: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
