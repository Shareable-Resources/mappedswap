/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface TickTest extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): TickTest;
  clone(): TickTest;
  methods: {
    clear(tick: number | string | BN): NonPayableTransactionObject<void>;

    cross(
      tick: number | string | BN,
      feeGrowthGlobal0X128: number | string | BN,
      feeGrowthGlobal1X128: number | string | BN,
      secondsPerLiquidityCumulativeX128: number | string | BN,
      tickCumulative: number | string | BN,
      time: number | string | BN
    ): NonPayableTransactionObject<string>;

    getFeeGrowthInside(
      tickLower: number | string | BN,
      tickUpper: number | string | BN,
      tickCurrent: number | string | BN,
      feeGrowthGlobal0X128: number | string | BN,
      feeGrowthGlobal1X128: number | string | BN
    ): NonPayableTransactionObject<{
      feeGrowthInside0X128: string;
      feeGrowthInside1X128: string;
      0: string;
      1: string;
    }>;

    setTick(
      tick: number | string | BN,
      info: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        boolean
      ]
    ): NonPayableTransactionObject<void>;

    tickSpacingToMaxLiquidityPerTick(
      tickSpacing: number | string | BN
    ): NonPayableTransactionObject<string>;

    ticks(arg0: number | string | BN): NonPayableTransactionObject<{
      liquidityGross: string;
      liquidityNet: string;
      feeGrowthOutside0X128: string;
      feeGrowthOutside1X128: string;
      tickCumulativeOutside: string;
      secondsPerLiquidityOutsideX128: string;
      secondsOutside: string;
      initialized: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: boolean;
    }>;

    update(
      tick: number | string | BN,
      tickCurrent: number | string | BN,
      liquidityDelta: number | string | BN,
      feeGrowthGlobal0X128: number | string | BN,
      feeGrowthGlobal1X128: number | string | BN,
      secondsPerLiquidityCumulativeX128: number | string | BN,
      tickCumulative: number | string | BN,
      time: number | string | BN,
      upper: boolean,
      maxLiquidity: number | string | BN
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
