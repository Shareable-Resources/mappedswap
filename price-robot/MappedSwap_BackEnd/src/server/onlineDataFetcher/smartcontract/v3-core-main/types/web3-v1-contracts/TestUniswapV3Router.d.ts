/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type SwapCallback = ContractEventLog<{
  amount0Delta: string;
  amount1Delta: string;
  0: string;
  1: string;
}>;

export interface TestUniswapV3Router extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): TestUniswapV3Router;
  clone(): TestUniswapV3Router;
  methods: {
    swapForExact0Multi(
      recipient: string,
      poolInput: string,
      poolOutput: string,
      amount0Out: number | string | BN
    ): NonPayableTransactionObject<void>;

    swapForExact1Multi(
      recipient: string,
      poolInput: string,
      poolOutput: string,
      amount1Out: number | string | BN
    ): NonPayableTransactionObject<void>;

    uniswapV3SwapCallback(
      amount0Delta: number | string | BN,
      amount1Delta: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    SwapCallback(cb?: Callback<SwapCallback>): EventEmitter;
    SwapCallback(
      options?: EventOptions,
      cb?: Callback<SwapCallback>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "SwapCallback", cb: Callback<SwapCallback>): void;
  once(
    event: "SwapCallback",
    options: EventOptions,
    cb: Callback<SwapCallback>
  ): void;
}
